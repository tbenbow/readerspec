import { ReaderSpec, Field } from '../types';

export interface GeneratedService {
  filename: string;
  content: string;
}

export function generateService(spec: ReaderSpec): GeneratedService {
  const resourceName = spec.resource.toLowerCase();
  const filename = `${resourceName}.service.ts`;

  // Convert resource name to PascalCase for class and interface names
  const pascalCaseName = spec.resource.replace(/_([a-z])/g, (_, letter) =>
    letter.toUpperCase()
  );

  // Generate TypeScript interface for the resource
  const interfaceFields = spec.fields
    .map((field) => `  ${field.name}: ${mapFieldType(field)};`)
    .join('\n');

  const content = `// AUTO-GENERATED by ReaderSpec - Do not edit manually
export interface ${pascalCaseName} {
${interfaceFields}
}

export interface ${pascalCaseName}ListQuery {
  query?: any; // Will be validated by the query processor
  userId?: string;
}

export interface ${pascalCaseName}ListResult {
  items: ${pascalCaseName}[];
  page: number;
  per: number;
  total: number;
}

export class ${pascalCaseName}Service {
  // In-memory data store (will be replaced with real database in later phases)
  private data: ${pascalCaseName}[] = [];

  constructor() {
    // Initialize with sample data
    this.data = this.generateSampleData();
    
    // Validate data structure
    this.validateDataStructure();
  }

  async findMany(options: ${pascalCaseName}ListQuery): Promise<${pascalCaseName}ListResult> {
    try {
      // Use the query processor for advanced filtering, sorting, and pagination
      const { ${pascalCaseName}QueryProcessor } = await import('../query-processors/${resourceName}.query-processor');
      const processor = new ${pascalCaseName}QueryProcessor(this.data);
      
      const result = processor.process({
        query: options.query,
        userId: options.userId,
      });

      return {
        items: result.items,
        page: result.page,
        per: result.per,
        total: result.total,
      };
    } catch (error) {
      console.error(\`Error in ${pascalCaseName}Service.findMany:\`, error);
      throw new Error(\`Failed to fetch ${pascalCaseName.toLowerCase()} items: \${error instanceof Error ? error.message : 'Unknown error'}\`);
    }
  }

  private generateSampleData(): ${pascalCaseName}[] {
    // Generate 10 sample items
    const sampleData: ${pascalCaseName}[] = [];
    
    // Define sample data arrays
    const categories = ['Technology', 'Science', 'Business', 'Health', 'Education'];
    const tagSets = [
      ['AI', 'Machine Learning'],
      ['Web Development', 'JavaScript'],
      ['Data Science', 'Python'],
      ['Cloud Computing', 'AWS'],
      ['Mobile Development', 'React Native']
    ];
    
    for (let i = 1; i <= 10; i++) {
      sampleData.push({
${generateSampleDataFields(spec.fields)}
      });
    }

    return sampleData;
  }

  private validateDataStructure(): void {
    if (this.data.length === 0) return;
    
    const sampleItem = this.data[0];
    const requiredFields = ${JSON.stringify(spec.fields.map((f) => f.name))};
    
    for (const field of requiredFields) {
      if (!(field in sampleItem)) {
        console.warn(\`Warning: Missing field '\${field}' in ${pascalCaseName} data structure\`);
      }
    }
  }
}
`;

  return { filename, content };
}

function mapFieldType(field: Field): string {
  switch (field.type) {
    case 'id':
      return 'string';
    case 'string':
      return 'string';
    case 'boolean':
      return 'string'; // Maps to "yes"/"no" values
    case 'datetime':
      return 'string'; // ISO date string
    case 'number':
      return 'number';
    default:
      return 'any';
  }
}

function generateSampleDataFields(fields: Field[]): string {
  return fields
    .map((field) => {
      const value = generateSampleValue(field, 'i');
      return `        ${field.name}: ${value}`;
    })
    .join(',\n');
}

function generateSampleValue(field: Field, loopVar: string): string {
  switch (field.type) {
    case 'id':
      return '`id-${i}`';
    case 'string':
      if (field.name.toLowerCase().includes('email')) {
        return '`user${i}@example.com`';
      }
      if (field.name.toLowerCase().includes('name')) {
        return `\`Sample ${field.name} \${i}\``;
      }
      if (field.name.toLowerCase().includes('title')) {
        return `\`Sample Blog Post Title \${${loopVar}}\``;
      }
      if (field.name.toLowerCase().includes('content')) {
        return `\`This is a sample content excerpt for blog post \${${loopVar}}. It provides a brief overview of what the post contains.\``;
      }
      if (field.name.toLowerCase().includes('status')) {
        return `${loopVar} % 3 === 0 ? "draft" : ${loopVar} % 3 === 1 ? "published" : "archived"`;
      }
      if (field.name.toLowerCase().includes('category')) {
        const categories = [
          'Technology',
          'Science',
          'Business',
          'Health',
          'Education',
        ];
        return `\`\${categories[${loopVar} % categories.length]}\``;
      }
      if (field.name.toLowerCase().includes('tags')) {
        const tagSets = [
          ['AI', 'Machine Learning'],
          ['Web Development', 'JavaScript'],
          ['Data Science', 'Python'],
          ['Cloud Computing', 'AWS'],
          ['Mobile Development', 'React Native'],
        ];
        return `JSON.stringify(tagSets[${loopVar} % tagSets.length])`;
      }
      if (field.name.toLowerCase().includes('date')) {
        return `new Date(Date.now() - ${loopVar} * 24 * 60 * 60 * 1000).toISOString()`;
      }
      return `\`Sample ${field.name} \${${loopVar}}\``;
    case 'boolean':
      return `${loopVar} % 2 === 0 ? "yes" : "no"`;
    case 'datetime':
      return `new Date(Date.now() - ${loopVar} * 24 * 60 * 60 * 1000).toISOString()`;
    case 'number':
      return `${loopVar} * 10`;
    default:
      return 'null';
  }
}

export function generateAllServices(specs: ReaderSpec[]): GeneratedService[] {
  return specs.map(generateService);
}
