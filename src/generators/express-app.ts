import { ReaderSpec } from '../types';
import { log } from '../utils/logger';

export interface GeneratedApp {
  filename: string;
  content: string;
}

export function generateExpressApp(specs: ReaderSpec[]): GeneratedApp {
  log.debug('Generating Express app', { resourceCount: specs.length });

  const imports = specs
    .map((spec) => {
      const resourceName = spec.resource.toLowerCase();
      return `import ${resourceName}Routes from './routes/${resourceName}.routes';`;
    })
    .join('\n');

  const routeRegistrations = specs
    .map((spec) => {
      const resourceName = spec.resource.toLowerCase();
      return `app.use('/${resourceName}', ${resourceName}Routes);`;
    })
    .join('\n');

  const content = `// AUTO-GENERATED by ReaderSpec - Do not edit manually
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';

${imports}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    service: 'ReaderSpec Generated API'
  });
});

// API Routes
${routeRegistrations}

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Not Found',
    message: \`Route \${req.method} \${req.originalUrl} not found\`
  });
});

// Error handler
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Unhandled error:', err);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// Start server
if (require.main === module) {
  app.listen(PORT, () => {
    console.log(\`ðŸš€ ReaderSpec API server running on http://localhost:\${PORT}\`);
    console.log(\`ðŸ“Š Available endpoints:\`);
${specs.map((spec) => `    console.log(\`  GET /${spec.resource.toLowerCase()} - List ${spec.resource} items\`);`).join('\n')}
    console.log(\`  GET /health - Health check\`);
  });
}

export default app;
`;

  return { filename: 'server.ts', content };
}

export function generatePackageJson(): GeneratedApp {
  const content = `{
  "name": "readerspec-generated-api",
  "version": "1.0.0",
  "description": "Auto-generated Express API from ReaderSpec specifications",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "ts-node server.ts",
    "build": "tsc",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:ci": "jest --ci --coverage --watchAll=false"
  },
  "dependencies": {
    "express": "^4.18.0",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "morgan": "^1.10.0",
    "zod": "^3.22.0"
  },
  "devDependencies": {
    "@types/express": "^4.17.0",
    "@types/cors": "^2.8.0",
    "@types/morgan": "^1.9.0",
    "@types/node": "^20.0.0",
    "@types/jest": "^29.0.0",
    "@types/supertest": "^2.0.0",
    "typescript": "^5.0.0",
    "ts-node": "^10.0.0",
    "jest": "^29.0.0",
    "ts-jest": "^29.0.0",
    "supertest": "^6.0.0"
  },
  "keywords": ["api", "generated", "readerspec"],
  "license": "ISC"
}`;

  return { filename: 'package.json', content };
}

export function generateJestConfig(): GeneratedApp {
  const content = `module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/tests'],
  testMatch: ['**/*.test.ts'],
  collectCoverageFrom: [
    '**/*.ts',
    '!**/*.d.ts',
    '!**/node_modules/**',
    '!**/tests/**',
  ],
  coverageDirectory: 'coverage',
  coverageReporters: ['text', 'lcov', 'html'],
  testTimeout: 10000,
  setupFilesAfterEnv: ['<rootDir>/tests/setup.ts'],
  transform: {
    '^.+\\.ts$': [
      'ts-jest',
      {
        tsconfig: 'tsconfig.json',
      },
    ],
  },
};`;

  return { filename: 'jest.config.js', content };
}

export function generateTestSetup(): GeneratedApp {
  const content = `// Test setup file for ReaderSpec generated API
// This file runs before each test and sets up the testing environment

// Set test environment
process.env.NODE_ENV = 'test';

// Increase timeout for tests
jest.setTimeout(10000);

// Type declarations for global test utilities
declare global {
  var testUtils: {
    createTestUserId: () => string;
    createTestData: (overrides?: any) => any;
    validatePaginationResponse: (response: any) => void;
    validateErrorResponse: (response: any, statusCode: number, errorType?: string) => void;
  };
}

// Global test utilities
global.testUtils = {
  // Helper to create test user ID
  createTestUserId: () => \`test-user-\${Date.now()}\`,
  
  // Helper to create test data
  createTestData: (overrides = {}) => ({
    id: \`test-id-\${Date.now()}\`,
    text: 'Test todo item',
    done: 'no',
    createdAt: new Date().toISOString(),
    userId: 'test-user-123',
    ...overrides,
  }),
  
  // Helper to validate pagination response
  validatePaginationResponse: (response: any) => {
    expect(response.body).toHaveProperty('items');
    expect(response.body).toHaveProperty('page');
    expect(response.body).toHaveProperty('per');
    expect(response.body).toHaveProperty('total');
    expect(Array.isArray(response.body.items)).toBe(true);
    expect(typeof response.body.page).toBe('number');
    expect(typeof response.body.per).toBe('number');
    expect(typeof response.body.total).toBe('number');
  },
  
  // Helper to validate error response
  validateErrorResponse: (response: any, statusCode: number, errorType?: string) => {
    expect(response.status).toBe(statusCode);
    expect(response.body).toHaveProperty('error');
    if (errorType) {
      expect(response.body.error).toBe(errorType);
    }
  },
};

// Console logging during tests (optional)
if (process.env.LOG_TESTS === 'true') {
  console.log('ðŸ§ª Test environment initialized');
}

export {};`;

  return { filename: 'tests/setup.ts', content };
}
