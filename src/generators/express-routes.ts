import { ReaderSpec } from '../types';

export interface GeneratedRoute {
  filename: string;
  content: string;
}

export function generateExpressRoute(spec: ReaderSpec): GeneratedRoute {
  const resourceName = spec.resource.toLowerCase();
  const filename = `${resourceName}.routes.ts`;

  // Convert resource name to camelCase for variable names
  const camelCaseName = resourceName.replace(/_([a-z])/g, (_, letter) =>
    letter.toUpperCase()
  );
  const pascalCaseName = spec.resource.replace(/_([a-z])/g, (_, letter) =>
    letter.toUpperCase()
  );

  const content = `// AUTO-GENERATED by ReaderSpec - Do not edit manually
import { Request, Response, Router } from 'express';
import { ${pascalCaseName}Service } from '../services/${resourceName}.service';
import { validate${pascalCaseName}Query } from '../validation/${resourceName}.validation';

const router = Router();
const service = new ${pascalCaseName}Service();

/**
 * GET /${resourceName}
 * List all ${resourceName} items with filtering, sorting, and pagination
 */
router.get('/', async (req: Request, res: Response) => {
  try {
    // Validate and parse query parameters
    const validatedQuery = validate${pascalCaseName}Query(req.query);
    
    const result = await service.findMany({
      query: validatedQuery,
      userId: req.headers['x-user-id'] as string,
    });

    res.json(result);
  } catch (error) {
    if (error && typeof error === 'object' && 'name' in error && error.name === 'ZodError') {
      // Validation error
      res.status(400).json({ 
        error: 'Bad Request',
        message: 'Invalid query parameters',
        details: error instanceof Error ? error.message : 'Validation failed'
      });
    } else {
      console.error('Error in GET /${resourceName}:', error);
      res.status(500).json({ 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }
});

export default router;
`;

  return { filename, content };
}

export function generateAllRoutes(specs: ReaderSpec[]): GeneratedRoute[] {
  return specs.map(generateExpressRoute);
}
