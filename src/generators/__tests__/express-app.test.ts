import {
  generateExpressApp,
  generatePackageJson,
  GeneratedApp,
} from '../express-app';
import { ReaderSpec } from '../../types';

describe('express-app generator', () => {
  describe('generateExpressApp', () => {
    it('should generate express app with single resource', () => {
      const specs: ReaderSpec[] = [
        {
          resource: 'User',
          fields: [],
          filters: [],
          sort: [],
          paginate: { maxPer: 100, defaultPer: 20, startPage: 1 },
          ownership: { by: 'user' },
          returns: ['id', 'name', 'email'],
        },
      ];

      const result = generateExpressApp(specs);

      expect(result.filename).toBe('server.ts');
      expect(result.content).toContain(
        "import userRoutes from './routes/user.routes';"
      );
      expect(result.content).toContain("app.use('/user', userRoutes);");
      expect(result.content).toContain(
        'console.log(\`  GET /user - List User items\`);'
      );
      expect(result.content).toContain(
        '// AUTO-GENERATED by ReaderSpec - Do not edit manually'
      );
    });

    it('should generate express app with multiple resources', () => {
      const specs: ReaderSpec[] = [
        {
          resource: 'User',
          fields: [],
          filters: [],
          sort: [],
          paginate: { maxPer: 100, defaultPer: 20, startPage: 1 },
          ownership: { by: 'user' },
          returns: ['id', 'name', 'email'],
        },
        {
          resource: 'Product',
          fields: [],
          filters: [],
          sort: [],
          paginate: { maxPer: 100, defaultPer: 20, startPage: 1 },
          ownership: { by: 'user' },
          returns: ['id', 'name', 'price'],
        },
      ];

      const result = generateExpressApp(specs);

      expect(result.content).toContain(
        "import userRoutes from './routes/user.routes';"
      );
      expect(result.content).toContain(
        "import productRoutes from './routes/product.routes';"
      );
      expect(result.content).toContain("app.use('/user', userRoutes);");
      expect(result.content).toContain("app.use('/product', productRoutes);");
      expect(result.content).toContain(
        'console.log(\`  GET /user - List User items\`);'
      );
      expect(result.content).toContain(
        'console.log(\`  GET /product - List Product items\`);'
      );
    });

    it('should generate express app with no resources', () => {
      const specs: ReaderSpec[] = [];
      const result = generateExpressApp(specs);

      expect(result.content).toContain('// API Routes');
      expect(result.content).toContain('// 404 handler');
      expect(result.content).toContain('// Error handler');
      expect(result.content).toContain('app.listen(PORT, () => {');
      expect(result.content).toContain(
        'console.log(`ðŸš€ ReaderSpec API server running on http://localhost:${PORT}`'
      );
      expect(result.content).toContain('console.log(`ðŸ“Š Available endpoints:`');
      expect(result.content).toContain(
        'console.log(`  GET /health - Health check`'
      );
    });

    it('should include all required middleware and imports', () => {
      const specs: ReaderSpec[] = [];
      const result = generateExpressApp(specs);

      expect(result.content).toContain("import express from 'express';");
      expect(result.content).toContain("import cors from 'cors';");
      expect(result.content).toContain("import helmet from 'helmet';");
      expect(result.content).toContain("import morgan from 'morgan';");
      expect(result.content).toContain('app.use(helmet());');
      expect(result.content).toContain('app.use(cors());');
      expect(result.content).toContain("app.use(morgan('combined'));");
      expect(result.content).toContain('app.use(express.json());');
      expect(result.content).toContain(
        'app.use(express.urlencoded({ extended: true }));'
      );
    });

    it('should include health check endpoint', () => {
      const specs: ReaderSpec[] = [];
      const result = generateExpressApp(specs);

      expect(result.content).toContain("app.get('/health', (req, res) => {");
      expect(result.content).toContain('res.json({');
      expect(result.content).toContain("status: 'ok'");
      expect(result.content).toContain('timestamp: new Date().toISOString()');
      expect(result.content).toContain("service: 'ReaderSpec Generated API'");
    });

    it('should handle resource names with different casing', () => {
      const specs: ReaderSpec[] = [
        {
          resource: 'APIUser',
          fields: [],
          filters: [],
          sort: [],
          paginate: { maxPer: 100, defaultPer: 20, startPage: 1 },
          ownership: { by: 'user' },
          returns: ['id', 'name'],
        },
      ];

      const result = generateExpressApp(specs);

      expect(result.content).toContain(
        "import apiuserRoutes from './routes/apiuser.routes';"
      );
      expect(result.content).toContain("app.use('/apiuser', apiuserRoutes);");
      expect(result.content).toContain(
        'console.log(\`  GET /apiuser - List APIUser items\`);'
      );
    });
  });

  describe('generatePackageJson', () => {
    it('should generate package.json with correct content', () => {
      const result = generatePackageJson();

      expect(result.filename).toBe('package.json');
      expect(result.content).toContain('"name": "readerspec-generated-api"');
      expect(result.content).toContain('"version": "1.0.0"');
      expect(result.content).toContain(
        '"description": "Auto-generated Express API from ReaderSpec specifications"'
      );
      expect(result.content).toContain('"main": "server.js"');
      expect(result.content).toContain('"start": "node server.js"');
      expect(result.content).toContain('"dev": "ts-node server.ts"');
      expect(result.content).toContain('"build": "tsc"');
      expect(result.content).toContain('"test": "jest"');
    });
  });
});
