import { ReaderSpec, Field, Filter } from '../types';

export interface GeneratedMarkdownDocs {
  filename: string;
  content: string;
}

export function generateMarkdownDocs(
  specs: ReaderSpec[]
): GeneratedMarkdownDocs {
  const content = generateDocsContent(specs);
  return { filename: 'README.md', content };
}

function generateDocsContent(specs: ReaderSpec[]): string {
  const overview = generateOverview(specs);
  const endpoints = specs.map(generateEndpointDocs).join('\n\n');
  const examples = generateExamples(specs);
  const gettingStarted = generateGettingStarted();

  return `# ReaderSpec Generated API

${overview}

## 🚀 Getting Started

${gettingStarted}

## 📚 API Endpoints

${endpoints}

## 💡 Examples

${examples}

## 🔧 Development

### Running Locally

\`\`\`bash
# Start the development server
npm run dev

# The API will be available at http://localhost:3000
\`\`\`

### Environment Variables

- \`PORT\`: Server port (default: 3000)
- \`NODE_ENV\`: Environment (development/production)

## 📖 How It Works

This API was automatically generated from human-readable markdown specifications. Each endpoint is designed to be:

- **Simple**: Easy to understand and use
- **Consistent**: Same patterns across all resources
- **Flexible**: Powerful filtering, sorting, and pagination
- **Secure**: Automatic ownership filtering

## 📚 Using the Generated Documentation

### OpenAPI Specification (openapi.yaml)
- **Import into Swagger UI** for interactive API exploration
- **Use with Postman** for API testing and documentation
- **Generate client libraries** for your frontend
- **Share with your team** for API documentation

### Postman Collection (postman-collection.json)
- **Import directly into Postman** - all requests are pre-configured
- **Test all endpoints** with example parameters
- **Use variables** for base URL and user ID
- **Built-in test scripts** for response validation

### TypeScript Types (types.ts)
- **Copy into your frontend project** for type safety
- **Use the included API client** for easy integration
- **Get autocomplete** and error checking in your IDE

## 🎨 Customization

### Modifying Generated Code
Generated files are marked with \`// AUTO-GENERATED by ReaderSpec - Do not edit manually\`. 

**Don't edit these files directly** - they'll be overwritten on the next build.

### Adding Custom Logic
1. **Create your own files** in the \`apps/api/\` directory
2. **Import and extend** the generated services
3. **Add middleware** to the generated Express app
4. **Customize validation** by extending the generated schemas

### Example: Adding Custom Middleware
\`\`\`typescript
// apps/api/custom-middleware.ts
import { Request, Response, NextFunction } from 'express';

export function customAuth(req: Request, res: Response, next: NextFunction) {
  // Your custom authentication logic
  next();
}

// apps/api/server.ts (add after the generated code)
import { customAuth } from './custom-middleware';
app.use(customAuth);
\`\`\`

## 🔄 Updating Your API

The API is generated from \`.readerspec.md\` files. To modify the API:

1. **Edit the markdown files** in the \`specs/\` directory
2. **Run \`readerspec build\`** to regenerate the API
3. **Changes are reflected immediately** in development mode
4. **Test with the generated Postman collection**

## 🤝 Contributing

## 🆘 Troubleshooting

### Common Issues

#### "Port already in use" Error
\`\`\`bash
# Kill existing processes
pkill -f "ts-node|npm run dev"

# Or use a different port
PORT=3001 npm run dev
\`\`\`

#### "Cannot find module" Errors
\`\`\`bash
# Reinstall dependencies
rm -rf node_modules package-lock.json
npm install

# Rebuild the API
readerspec build
\`\`\`

#### Validation Errors
- Check that your \`.readerspec.md\` files have valid JSON blocks
- Ensure all required fields are present in your specs
- Run \`readerspec check\` to validate your specifications

#### TypeScript Compilation Errors
- The generated API uses TypeScript - ensure \`ts-node\` is installed
- Check that all generated files are present in the \`apps/api/\` directory
- Run \`readerspec build\` to regenerate any missing files

### Getting Help
- **Check the logs** - Look for error messages in the terminal
- **Validate your specs** - Run \`readerspec check\` to find issues
- **Rebuild the API** - Run \`readerspec build\` to regenerate everything
- **Check the documentation** - Review the generated OpenAPI spec and README

## 📄 License

Generated by ReaderSpec - Making APIs simple and human-friendly.
`;
}

function generateOverview(specs: ReaderSpec[]): string {
  const resourceCount = specs.length;
  const resourceNames = specs.map((s) => s.resource).join(', ');

  return `## 📖 Overview

This is a **simple, human-friendly API** that was automatically generated from markdown specifications.

### What You Get

- **${resourceCount} endpoints** for managing ${resourceNames}
- **Automatic filtering** and **search** capabilities
- **Smart sorting** and **pagination**
- **Ownership scoping** to keep data secure
- **Clear examples** and **simple responses**

### Key Features

✅ **No complex setup** - Just start the server and go  
✅ **Human-readable responses** - Clear, simple JSON  
✅ **Built-in validation** - Automatic error handling  
✅ **Flexible queries** - Filter, sort, and paginate easily  
✅ **Ownership security** - Users only see their own data  

This API follows the **ReaderSpec philosophy**: Keep it simple, keep it human, keep it working.
`;
}

function generateGettingStarted(): string {
  return `### Quick Start

1. **Start the server**
   \`\`\`bash
   npm run dev
   \`\`\`

2. **Make your first request**
   \`\`\`bash
   curl http://localhost:3000/health
   \`\`\`

3. **List some items**
   \`\`\`bash
   curl http://localhost:3000/todo
   \`\`\`

4. **Add filtering**
   \`\`\`bash
   curl "http://localhost:3000/todo?done=yes&page=1&per=10"
   \`\`\`

### Testing Your API

#### Option 1: Use the Generated Postman Collection
1. **Import the collection:**
   - Open Postman
   - Click "Import" → "File" → Select \`postman-collection.json\`
   - Set the \`baseUrl\` variable to your API URL

2. **Test endpoints:**
   - All requests are pre-configured with examples
   - Use the \`userId\` variable for ownership testing
   - Run the collection to test your entire API

#### Option 2: Use curl Commands
\`\`\`bash
# Basic operations
curl http://localhost:3000/health
curl http://localhost:3000/todo

# Filtering
curl "http://localhost:3000/todo?done=yes"
curl "http://localhost:3000/todo?q=urgent"

# Sorting
curl "http://localhost:3000/todo?sort_by=createdAt&sort_dir=desc"

# Pagination
curl "http://localhost:3000/todo?page=1&per=5"

# Ownership (set your user ID)
curl -H "x-user-id: your-user-id" http://localhost:3000/todo
\`\`\`

#### Option 3: Use the Generated TypeScript Client
\`\`\`typescript
import { api } from './types';

// Basic usage
const todos = await api.todo.list();

// With filtering
const completedTodos = await api.todo.list({ done: 'yes' });

// With pagination
const page2 = await api.todo.list({ page: 2, per: 10 });

// With ownership
const myTodos = await api.todo.list({}, { userId: 'your-user-id' });
\`\`\`

### Authentication

To see only your own data, set the \`x-user-id\` header:

\`\`\`bash
curl -H "x-user-id: your-user-id" http://localhost:3000/todo
\`\`\`

### Response Format

All endpoints return data in this simple format:

\`\`\`json
{
  "items": [...],
  "page": 1,
  "per": 20,
  "total": 100
}
\`\`\`

### Deployment

#### Deploy to Render (Recommended for beginners)
1. **Push your code to GitHub**
2. **Create a Render account** at [render.com](https://render.com)
3. **Create a new Web Service:**
   - Connect your GitHub repository
   - Set build command: \`npm install && npm run build\`
   - Set start command: \`npm start\`
4. **Deploy** - Render will automatically build and deploy your API

#### Deploy to Railway
\`\`\`bash
npm install -g @railway/cli
railway login
railway init
railway up
\`\`\`

#### Deploy to Heroku
\`\`\`bash
npm install -g heroku
heroku create your-app-name
git push heroku main
\`\`\`

#### Environment Variables
Set these in your deployment platform:
\`\`\`bash
PORT=3000                    # Port for your API
NODE_ENV=production         # Environment
OPEN_AI_API_KEY=your-key    # If using AI translation features
\`\`\``;
}

function generateEndpointDocs(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();
  const pascalCaseName = spec.resource.replace(/_([a-z])/g, (_, letter) =>
    letter.toUpperCase()
  );

  const description = generateEndpointDescription(spec);
  const parameters = generateParameterDocs(spec);
  const examples = generateEndpointExamples(spec);

  return `### ${spec.resource}

${description}

**Endpoint:** \`GET /${resourceName}\`

#### Parameters

${parameters}

#### Examples

${examples}

#### Response

\`\`\`json
{
  "items": [
    {
      ${spec.fields.map((f) => `"${f.name}": "${generateExampleValue(f)}"`).join(',\n      ')}
    }
  ],
  "page": 1,
  "per": ${spec.paginate.defaultPer},
  "total": 1
}
\`\`\``;
}

function generateEndpointDescription(spec: ReaderSpec): string {
  let desc = `Get a list of ${spec.resource.toLowerCase()} items. You can filter, sort, and paginate the results.`;

  if (spec.ownership) {
    desc += `\n\n**Note:** Results are automatically filtered to show only items you own. Set the \`x-user-id\` header to see your data.`;
  }

  return desc;
}

function generateParameterDocs(spec: ReaderSpec): string {
  const params: string[] = [];

  // Add filter parameters
  spec.filters.forEach((filter) => {
    const param = generateFilterParamDoc(filter, spec);
    if (param) params.push(param);
  });

  // Add search parameter if exists
  const searchFilter = spec.filters.find((f) => f.op === 'search');
  if (searchFilter) {
    params.push(
      `- **\`q\`** (string, optional) - Search term to find in ${searchFilter.target || 'text content'}`
    );
  }

  // Add sort parameters
  if (spec.sort.length > 0) {
    const sortFields = spec.sort.map((s) => s.field).join(', ');
    params.push(
      `- **\`sort_by\`** (string, optional) - Field to sort by: ${sortFields}`
    );
    params.push(
      `- **\`sort_dir\`** (string, optional) - Sort direction: \`asc\` or \`desc\``
    );
  }

  // Add pagination parameters
  params.push(
    `- **\`page\`** (number, optional) - Page number, starts at ${spec.paginate.startPage}`
  );
  params.push(
    `- **\`per\`** (number, optional) - Items per page, max ${spec.paginate.maxPer}`
  );

  return params.join('\n');
}

function generateFilterParamDoc(
  filter: Filter,
  spec: ReaderSpec
): string | null {
  if (filter.op === 'search') return null;

  const field = spec.fields.find((f) => f.name === filter.field);
  if (!field) return null;

  let desc = `- **\`${filter.field}\`** (${getFilterType(filter)}, optional) - Filter by ${filter.field}`;

  if (filter.op === 'equals' && filter.values && filter.values.length > 0) {
    desc += `\n  - Allowed values: ${filter.values.map((v) => `\`${v}\``).join(', ')}`;
  }

  if (filter.op === 'in') {
    desc += `\n  - Provide multiple values as comma-separated list`;
  }

  if (filter.op === 'range') {
    desc += `\n  - Use \`${filter.field}_min\` and \`${filter.field}_max\` for ranges`;
  }

  return desc;
}

function getFilterType(filter: Filter): string {
  switch (filter.op) {
    case 'equals':
      return 'string';
    case 'in':
      return 'array of strings';
    case 'range':
      return 'number';
    default:
      return 'string';
  }
}

function generateEndpointExamples(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();
  const examples: string[] = [];

  // Basic example
  examples.push(`**Basic request:**
\`\`\`bash
curl http://localhost:3000/${resourceName}
\`\`\``);

  // Filtered example
  if (spec.filters.length > 0) {
    const firstFilter = spec.filters[0];
    if (
      firstFilter.op === 'equals' &&
      firstFilter.values &&
      firstFilter.values.length > 0
    ) {
      examples.push(`**With filtering:**
\`\`\`bash
curl "http://localhost:3000/${resourceName}?${firstFilter.field}=${firstFilter.values[0]}"
\`\`\``);
    }
  }

  // Search example
  const searchFilter = spec.filters.find((f) => f.op === 'search');
  if (searchFilter) {
    examples.push(`**With search:**
\`\`\`bash
curl "http://localhost:3000/${resourceName}?q=example"
\`\`\``);
  }

  // Pagination example
  examples.push(`**With pagination:**
\`\`\`bash
curl "http://localhost:3000/${resourceName}?page=1&per=5"
\`\`\``);

  // Ownership example
  if (spec.ownership) {
    examples.push(`**With ownership filtering:**
\`\`\`bash
curl -H "x-user-id: your-user-id" http://localhost:3000/${resourceName}
\`\`\``);
  }

  return examples.join('\n\n');
}

function generateExamples(specs: ReaderSpec[]): string {
  const examples: string[] = [];

  // General examples
  examples.push(`### 🔍 Filtering Examples

**Filter by status:**
\`\`\`bash
curl "http://localhost:3000/blog_posts?publication_status=published"
\`\`\`

**Search in titles:**
\`\`\`bash
curl "http://localhost:3000/blog_posts?q=technology"
\`\`\`

**Multiple filters:**
\`\`\`bash
curl "http://localhost:3000/blog_posts?category=Technology&publication_status=published"
\`\`\``);

  // Sorting examples
  examples.push(`### 📊 Sorting Examples

**Sort by creation date (newest first):**
\`\`\`bash
curl "http://localhost:3000/blog_posts?sort_by=creation_date&sort_dir=desc"
\`\`\`

**Sort by title alphabetically:**
\`\`\`bash
curl "http://localhost:3000/blog_posts?sort_by=title&sort_dir=asc"
\`\`\``);

  // Pagination examples
  examples.push(`### 📄 Pagination Examples

**Get first page with 10 items:**
\`\`\`bash
curl "http://localhost:3000/blog_posts?page=1&per=10"
\`\`\`

**Get second page with 5 items:**
\`\`\`bash
curl "http://localhost:3000/blog_posts?page=2&per=5"
\`\`\``);

  // Ownership examples
  examples.push(`### 🔐 Ownership Examples

**Get only your items:**
\`\`\`bash
curl -H "x-user-id: user-123" http://localhost:3000/todo
\`\`\`

**Combine ownership with filtering:**
\`\`\`bash
curl -H "x-user-id: user-123" "http://localhost:3000/todo?done=yes&page=1&per=20"
\`\`\``);

  return examples.join('\n\n');
}

function generateExampleValue(field: Field): string {
  switch (field.type) {
    case 'id':
      return 'example-id';
    case 'string':
      if (field.name.toLowerCase().includes('title')) return 'Example Title';
      if (field.name.toLowerCase().includes('name')) return 'Example Name';
      if (field.name.toLowerCase().includes('status')) return 'published';
      if (field.name.toLowerCase().includes('category')) return 'Technology';
      if (field.name.toLowerCase().includes('tags')) return 'tag1, tag2';
      if (field.name.toLowerCase().includes('date'))
        return '2024-01-01T00:00:00.000Z';
      return 'Example Value';
    case 'boolean':
      return 'yes';
    case 'datetime':
      return '2024-01-01T00:00:00.000Z';
    case 'number':
      return '42';
    default:
      return 'null';
  }
}

export function generateAllMarkdownDocs(
  specs: ReaderSpec[]
): GeneratedMarkdownDocs[] {
  return [generateMarkdownDocs(specs)];
}
