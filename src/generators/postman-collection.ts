import { ReaderSpec, Field } from '../types';

export interface GeneratedPostmanCollection {
  filename: string;
  content: string;
}

export function generatePostmanCollection(
  specs: ReaderSpec[]
): GeneratedPostmanCollection {
  const content = generateCollectionContent(specs);
  return { filename: 'postman-collection.json', content };
}

function generateCollectionContent(specs: ReaderSpec[]): string {
  const items = specs.map(generateResourceItem).join(',\n');

  return `{
  "info": {
    "name": "ReaderSpec Generated API",
    "description": "Auto-generated Postman collection for testing the ReaderSpec API. Import this into Postman to get started quickly!",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "readerspec-generated-api",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "API base URL - change this for different environments"
    },
    {
      "key": "userId",
      "value": "your-user-id-here",
      "type": "string",
      "description": "Your user ID for ownership filtering"
    }
  ],
  "item": [
${items}
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-generated by ReaderSpec",
          "// This script runs before each request",
          "console.log('Making request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-generated by ReaderSpec",
          "// This script runs after each request",
          "if (pm.response.code === 200) {",
          "  console.log('✅ Request successful');",
          "  const response = pm.response.json();",
          "  if (response.items) {",
          "    console.log('📊 Found ' + response.items.length + ' items');",
          "    console.log('📄 Page ' + response.page + ' of ' + Math.ceil(response.total / response.per));",
          "  }",
          "} else {",
          "  console.log('❌ Request failed: ' + pm.response.code);",
          "}"
        ]
      }
    }
  ]
}`;
}

function generateResourceItem(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();
  const pascalCaseName = spec.resource.replace(/_([a-z])/g, (_, letter) =>
    letter.toUpperCase()
  );

  const basicRequest = generateBasicRequest(spec);
  const filteredRequest = generateFilteredRequest(spec);
  const searchRequest = generateSearchRequest(spec);
  const sortedRequest = generateSortedRequest(spec);
  const paginatedRequest = generatePaginatedRequest(spec);
  const ownershipRequest = generateOwnershipRequest(spec);

  return `    {
      "name": "${spec.resource}",
      "description": "API endpoints for managing ${spec.resource.toLowerCase()} items",
      "item": [
        {
          "name": "List ${spec.resource} (Basic)",
          "request": ${basicRequest}
        },
        {
          "name": "List ${spec.resource} (Filtered)",
          "request": ${filteredRequest}
        },
        {
          "name": "List ${spec.resource} (Search)",
          "request": ${searchRequest}
        },
        {
          "name": "List ${spec.resource} (Sorted)",
          "request": ${sortedRequest}
        },
        {
          "name": "List ${spec.resource} (Paginated)",
          "request": ${paginatedRequest}
        }${
          spec.ownership
            ? `,
        {
          "name": "List ${spec.resource} (Ownership)",
          "request": ${ownershipRequest}
        }`
            : ''
        }
      ]
    }`;
}

function generateBasicRequest(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();

  return `{
          "method": "GET",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/${resourceName}",
            "host": ["{{baseUrl}}"],
            "path": ["${resourceName}"]
          },
          "description": "Get a basic list of ${spec.resource.toLowerCase()} items without any filtering or pagination"
        }`;
}

function generateFilteredRequest(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();
  const filters = spec.filters.filter((f) => f.op !== 'search');

  if (filters.length === 0) {
    return generateBasicRequest(spec);
  }

  const firstFilter = filters[0];
  let exampleValue = 'example-value';

  if (
    firstFilter.op === 'equals' &&
    firstFilter.values &&
    firstFilter.values.length > 0
  ) {
    exampleValue = firstFilter.values[0];
  }

  return `{
          "method": "GET",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/${resourceName}?${firstFilter.field}=${exampleValue}",
            "host": ["{{baseUrl}}"],
            "path": ["${resourceName}"],
            "query": [
              {
                "key": "${firstFilter.field}",
                "value": "${exampleValue}",
                "description": "Filter by ${firstFilter.field}"
              }
            ]
          },
          "description": "Get ${spec.resource.toLowerCase()} items filtered by ${firstFilter.field}"
        }`;
}

function generateSearchRequest(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();
  const searchFilter = spec.filters.find((f) => f.op === 'search');

  if (!searchFilter) {
    return generateBasicRequest(spec);
  }

  return `{
          "method": "GET",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/${resourceName}?q=search-term",
            "host": ["{{baseUrl}}"],
            "path": ["${resourceName}"],
            "query": [
              {
                "key": "q",
                "value": "search-term",
                "description": "Search term to find in ${searchFilter.target || 'text content'}"
              }
            ]
          },
          "description": "Search ${spec.resource.toLowerCase()} items for 'search-term' in ${searchFilter.target || 'text content'}"
        }`;
}

function generateSortedRequest(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();

  if (spec.sort.length === 0) {
    return generateBasicRequest(spec);
  }

  const firstSort = spec.sort[0];

  return `{
          "method": "GET",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/${resourceName}?sort_by=${firstSort.field}&sort_dir=desc",
            "host": ["{{baseUrl}}"],
            "path": ["${resourceName}"],
            "query": [
              {
                "key": "sort_by",
                "value": "${firstSort.field}",
                "description": "Field to sort by"
              },
              {
                "key": "sort_dir",
                "value": "desc",
                "description": "Sort direction (desc for newest first)"
              }
            ]
          },
          "description": "Get ${spec.resource.toLowerCase()} items sorted by ${firstSort.field} in descending order"
        }`;
}

function generatePaginatedRequest(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();

  return `{
          "method": "GET",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/${resourceName}?page=1&per=5",
            "host": ["{{baseUrl}}"],
            "path": ["${resourceName}"],
            "query": [
              {
                "key": "page",
                "value": "1",
                "description": "Page number (starts at ${spec.paginate.startPage})"
              },
              {
                "key": "per",
                "value": "5",
                "description": "Items per page (max ${spec.paginate.maxPer})"
              }
            ]
          },
          "description": "Get first page of ${spec.resource.toLowerCase()} items with 5 items per page"
        }`;
}

function generateOwnershipRequest(spec: ReaderSpec): string {
  const resourceName = spec.resource.toLowerCase();

  return `{
          "method": "GET",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-user-id",
              "value": "{{userId}}",
              "description": "User ID for ownership filtering"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/${resourceName}",
            "host": ["{{baseUrl}}"],
            "path": ["${resourceName}"]
          },
          "description": "Get ${spec.resource.toLowerCase()} items owned by the current user (set userId variable first)"
        }`;
}

export function generateAllPostmanCollections(
  specs: ReaderSpec[]
): GeneratedPostmanCollection[] {
  return [generatePostmanCollection(specs)];
}
